// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-20, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bm3`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/production/substrate
// benchmark
// pallet
// --steps=50
// --repeat=20
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --json-file=/var/lib/gitlab-runner/builds/zyw4fam_/0/parity/mirrors/substrate/.git/.artifacts/bench.json
// --pallet=pallet-collective
// --chain=dev
// --header=./HEADER-APACHE2
// --output=./frame/collective/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_collective.
pub trait WeightInfo {
	fn set_members(m: u32, n: u32, p: u32, ) -> Weight;
	fn execute(b: u32, m: u32, ) -> Weight;
	fn propose_execute(b: u32, m: u32, ) -> Weight;
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight;
	fn vote(m: u32, ) -> Weight;
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight;
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight;
	fn close_disapproved(m: u32, p: u32, ) -> Weight;
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight;
	fn disapprove_proposal(p: u32, ) -> Weight;
}

/// Weights for pallet_collective using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Council Members (r:1 w:1)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Council Voting (r:101 w:100)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// Storage: Council Prime (r:0 w:1)
	/// Proof: Council Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (3233 ±0) + p * (3227 ±0)`
		//  Estimated: `10012 + m * (334 ±45) + p * (8826 ±45)`
		// Minimum execution time: 23_002_000 picoseconds.
		Weight::from_parts(23_136_000, 10012)
			// Standard Error: 75_511
			.saturating_add(Weight::from_parts(5_821_035, 0).saturating_mul(m.into()))
			// Standard Error: 75_511
			.saturating_add(Weight::from_parts(10_356_635, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 334).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 8826).saturating_mul(p.into()))
	}
	/// Storage: Council Members (r:1 w:0)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Preimage StatusFor (r:1 w:1)
	/// Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
	/// Storage: Preimage PreimageFor (r:0 w:1)
	/// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: MaxEncodedLen)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244 + m * (32 ±0)`
		//  Estimated: `4687`
		// Minimum execution time: 16_842_000 picoseconds.
		Weight::from_parts(22_610_183, 4687)
			// Standard Error: 515
			.saturating_add(Weight::from_parts(6_030, 0).saturating_mul(b.into()))
			// Standard Error: 5_309
			.saturating_add(Weight::from_parts(36_145, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Council Members (r:1 w:0)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Preimage StatusFor (r:1 w:1)
	/// Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
	/// Storage: Council Voting (r:1 w:0)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// Storage: Preimage PreimageFor (r:0 w:1)
	/// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: MaxEncodedLen)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244 + m * (32 ±0)`
		//  Estimated: `10012`
		// Minimum execution time: 20_433_000 picoseconds.
		Weight::from_parts(27_303_080, 10012)
			// Standard Error: 698
			.saturating_add(Weight::from_parts(9_912, 0).saturating_mul(b.into()))
			// Standard Error: 7_198
			.saturating_add(Weight::from_parts(69_523, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Council Members (r:1 w:0)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Preimage StatusFor (r:1 w:1)
	/// Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
	/// Storage: Council Voting (r:1 w:1)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// Storage: Council CounterForVoting (r:1 w:1)
	/// Proof: Council CounterForVoting (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Council ProposalCount (r:1 w:1)
	/// Proof: Council ProposalCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Preimage PreimageFor (r:0 w:1)
	/// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: MaxEncodedLen)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `689 + m * (32 ±0) + p * (9 ±0)`
		//  Estimated: `10012`
		// Minimum execution time: 30_349_000 picoseconds.
		Weight::from_parts(31_624_126, 10012)
			// Standard Error: 326
			.saturating_add(Weight::from_parts(8_551, 0).saturating_mul(b.into()))
			// Standard Error: 3_403
			.saturating_add(Weight::from_parts(45_550, 0).saturating_mul(m.into()))
			// Standard Error: 3_360
			.saturating_add(Weight::from_parts(52_641, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Council Members (r:1 w:0)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Council Voting (r:1 w:1)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// The range of component `m` is `[5, 100]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `891 + m * (64 ±0)`
		//  Estimated: `10012`
		// Minimum execution time: 23_810_000 picoseconds.
		Weight::from_parts(24_512_099, 10012)
			// Standard Error: 627
			.saturating_add(Weight::from_parts(52_608, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Council Voting (r:1 w:1)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// Storage: Council Members (r:1 w:0)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Council CounterForVoting (r:1 w:1)
	/// Proof: Council CounterForVoting (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `455 + m * (64 ±0) + p * (2 ±0)`
		//  Estimated: `10012`
		// Minimum execution time: 31_272_000 picoseconds.
		Weight::from_parts(29_968_548, 10012)
			// Standard Error: 508
			.saturating_add(Weight::from_parts(31_759, 0).saturating_mul(m.into()))
			// Standard Error: 495
			.saturating_add(Weight::from_parts(19_121, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Council Voting (r:1 w:1)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// Storage: Council Members (r:1 w:0)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Preimage PreimageFor (r:1 w:1)
	/// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: MaxEncodedLen)
	/// Storage: Council CounterForVoting (r:1 w:1)
	/// Proof: Council CounterForVoting (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Preimage StatusFor (r:1 w:1)
	/// Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `972 + b * (1 ±0) + m * (64 ±0) + p * (12 ±0)`
		//  Estimated: `4197809`
		// Minimum execution time: 38_426_000 picoseconds.
		Weight::from_parts(42_168_976, 4197809)
			// Standard Error: 382
			.saturating_add(Weight::from_parts(11_597, 0).saturating_mul(b.into()))
			// Standard Error: 4_041
			.saturating_add(Weight::from_parts(39_322, 0).saturating_mul(m.into()))
			// Standard Error: 3_939
			.saturating_add(Weight::from_parts(73_805, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Council Voting (r:1 w:1)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// Storage: Council Members (r:1 w:0)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Council Prime (r:1 w:0)
	/// Proof: Council Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Council CounterForVoting (r:1 w:1)
	/// Proof: Council CounterForVoting (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `474 + m * (64 ±0) + p * (2 ±0)`
		//  Estimated: `10012`
		// Minimum execution time: 34_363_000 picoseconds.
		Weight::from_parts(33_487_826, 10012)
			// Standard Error: 685
			.saturating_add(Weight::from_parts(32_747, 0).saturating_mul(m.into()))
			// Standard Error: 668
			.saturating_add(Weight::from_parts(15_881, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Council Voting (r:1 w:1)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// Storage: Council Members (r:1 w:0)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Council Prime (r:1 w:0)
	/// Proof: Council Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Preimage PreimageFor (r:1 w:1)
	/// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: MaxEncodedLen)
	/// Storage: Council CounterForVoting (r:1 w:1)
	/// Proof: Council CounterForVoting (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Preimage StatusFor (r:1 w:1)
	/// Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `992 + b * (1 ±0) + m * (64 ±0) + p * (12 ±0)`
		//  Estimated: `4197809`
		// Minimum execution time: 41_697_000 picoseconds.
		Weight::from_parts(45_580_292, 4197809)
			// Standard Error: 378
			.saturating_add(Weight::from_parts(11_125, 0).saturating_mul(b.into()))
			// Standard Error: 4_003
			.saturating_add(Weight::from_parts(36_935, 0).saturating_mul(m.into()))
			// Standard Error: 3_902
			.saturating_add(Weight::from_parts(71_157, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Council CounterForVoting (r:1 w:1)
	/// Proof: Council CounterForVoting (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Council Voting (r:1 w:1)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// Storage: Preimage StatusFor (r:1 w:1)
	/// Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
	/// Storage: Preimage PreimageFor (r:0 w:1)
	/// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: MaxEncodedLen)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1131 + p * (9 ±0)`
		//  Estimated: `10012`
		// Minimum execution time: 29_792_000 picoseconds.
		Weight::from_parts(33_599_529, 10012)
			// Standard Error: 2_176
			.saturating_add(Weight::from_parts(38_685, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Council Members (r:1 w:1)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Council Voting (r:101 w:100)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// Storage: Council Prime (r:0 w:1)
	/// Proof: Council Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (3233 ±0) + p * (3227 ±0)`
		//  Estimated: `10012 + m * (334 ±45) + p * (8826 ±45)`
		// Minimum execution time: 23_002_000 picoseconds.
		Weight::from_parts(23_136_000, 10012)
			// Standard Error: 75_511
			.saturating_add(Weight::from_parts(5_821_035, 0).saturating_mul(m.into()))
			// Standard Error: 75_511
			.saturating_add(Weight::from_parts(10_356_635, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 334).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 8826).saturating_mul(p.into()))
	}
	/// Storage: Council Members (r:1 w:0)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Preimage StatusFor (r:1 w:1)
	/// Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
	/// Storage: Preimage PreimageFor (r:0 w:1)
	/// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: MaxEncodedLen)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244 + m * (32 ±0)`
		//  Estimated: `4687`
		// Minimum execution time: 16_842_000 picoseconds.
		Weight::from_parts(22_610_183, 4687)
			// Standard Error: 515
			.saturating_add(Weight::from_parts(6_030, 0).saturating_mul(b.into()))
			// Standard Error: 5_309
			.saturating_add(Weight::from_parts(36_145, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Council Members (r:1 w:0)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Preimage StatusFor (r:1 w:1)
	/// Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
	/// Storage: Council Voting (r:1 w:0)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// Storage: Preimage PreimageFor (r:0 w:1)
	/// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: MaxEncodedLen)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244 + m * (32 ±0)`
		//  Estimated: `10012`
		// Minimum execution time: 20_433_000 picoseconds.
		Weight::from_parts(27_303_080, 10012)
			// Standard Error: 698
			.saturating_add(Weight::from_parts(9_912, 0).saturating_mul(b.into()))
			// Standard Error: 7_198
			.saturating_add(Weight::from_parts(69_523, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Council Members (r:1 w:0)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Preimage StatusFor (r:1 w:1)
	/// Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
	/// Storage: Council Voting (r:1 w:1)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// Storage: Council CounterForVoting (r:1 w:1)
	/// Proof: Council CounterForVoting (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Council ProposalCount (r:1 w:1)
	/// Proof: Council ProposalCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Preimage PreimageFor (r:0 w:1)
	/// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: MaxEncodedLen)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `689 + m * (32 ±0) + p * (9 ±0)`
		//  Estimated: `10012`
		// Minimum execution time: 30_349_000 picoseconds.
		Weight::from_parts(31_624_126, 10012)
			// Standard Error: 326
			.saturating_add(Weight::from_parts(8_551, 0).saturating_mul(b.into()))
			// Standard Error: 3_403
			.saturating_add(Weight::from_parts(45_550, 0).saturating_mul(m.into()))
			// Standard Error: 3_360
			.saturating_add(Weight::from_parts(52_641, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Council Members (r:1 w:0)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Council Voting (r:1 w:1)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// The range of component `m` is `[5, 100]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `891 + m * (64 ±0)`
		//  Estimated: `10012`
		// Minimum execution time: 23_810_000 picoseconds.
		Weight::from_parts(24_512_099, 10012)
			// Standard Error: 627
			.saturating_add(Weight::from_parts(52_608, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Council Voting (r:1 w:1)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// Storage: Council Members (r:1 w:0)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Council CounterForVoting (r:1 w:1)
	/// Proof: Council CounterForVoting (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `455 + m * (64 ±0) + p * (2 ±0)`
		//  Estimated: `10012`
		// Minimum execution time: 31_272_000 picoseconds.
		Weight::from_parts(29_968_548, 10012)
			// Standard Error: 508
			.saturating_add(Weight::from_parts(31_759, 0).saturating_mul(m.into()))
			// Standard Error: 495
			.saturating_add(Weight::from_parts(19_121, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Council Voting (r:1 w:1)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// Storage: Council Members (r:1 w:0)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Preimage PreimageFor (r:1 w:1)
	/// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: MaxEncodedLen)
	/// Storage: Council CounterForVoting (r:1 w:1)
	/// Proof: Council CounterForVoting (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Preimage StatusFor (r:1 w:1)
	/// Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `972 + b * (1 ±0) + m * (64 ±0) + p * (12 ±0)`
		//  Estimated: `4197809`
		// Minimum execution time: 38_426_000 picoseconds.
		Weight::from_parts(42_168_976, 4197809)
			// Standard Error: 382
			.saturating_add(Weight::from_parts(11_597, 0).saturating_mul(b.into()))
			// Standard Error: 4_041
			.saturating_add(Weight::from_parts(39_322, 0).saturating_mul(m.into()))
			// Standard Error: 3_939
			.saturating_add(Weight::from_parts(73_805, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Council Voting (r:1 w:1)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// Storage: Council Members (r:1 w:0)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Council Prime (r:1 w:0)
	/// Proof: Council Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Council CounterForVoting (r:1 w:1)
	/// Proof: Council CounterForVoting (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `474 + m * (64 ±0) + p * (2 ±0)`
		//  Estimated: `10012`
		// Minimum execution time: 34_363_000 picoseconds.
		Weight::from_parts(33_487_826, 10012)
			// Standard Error: 685
			.saturating_add(Weight::from_parts(32_747, 0).saturating_mul(m.into()))
			// Standard Error: 668
			.saturating_add(Weight::from_parts(15_881, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Council Voting (r:1 w:1)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// Storage: Council Members (r:1 w:0)
	/// Proof: Council Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Council Prime (r:1 w:0)
	/// Proof: Council Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Preimage PreimageFor (r:1 w:1)
	/// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: MaxEncodedLen)
	/// Storage: Council CounterForVoting (r:1 w:1)
	/// Proof: Council CounterForVoting (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Preimage StatusFor (r:1 w:1)
	/// Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `992 + b * (1 ±0) + m * (64 ±0) + p * (12 ±0)`
		//  Estimated: `4197809`
		// Minimum execution time: 41_697_000 picoseconds.
		Weight::from_parts(45_580_292, 4197809)
			// Standard Error: 378
			.saturating_add(Weight::from_parts(11_125, 0).saturating_mul(b.into()))
			// Standard Error: 4_003
			.saturating_add(Weight::from_parts(36_935, 0).saturating_mul(m.into()))
			// Standard Error: 3_902
			.saturating_add(Weight::from_parts(71_157, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Council CounterForVoting (r:1 w:1)
	/// Proof: Council CounterForVoting (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Council Voting (r:1 w:1)
	/// Proof: Council Voting (max_values: None, max_size: Some(6547), added: 9022, mode: MaxEncodedLen)
	/// Storage: Preimage StatusFor (r:1 w:1)
	/// Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
	/// Storage: Preimage PreimageFor (r:0 w:1)
	/// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: MaxEncodedLen)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1131 + p * (9 ±0)`
		//  Estimated: `10012`
		// Minimum execution time: 29_792_000 picoseconds.
		Weight::from_parts(33_599_529, 10012)
			// Standard Error: 2_176
			.saturating_add(Weight::from_parts(38_685, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}
